import uuid
from flask import Blueprint, request, jsonify
from time import time

import config.main as conf
from lib.hash import hashfunc
from models.user import User


auth_bp = Blueprint("auth", __name__)


@auth_bp.route("/", methods=["POST"])
def email_registration():
    """
    Email registration.
    Requires email, password, and password_confirmation params.
    A verification email will be sent to the email address provided."""
    email = request.form.get('email')
    password = request.form.get('password')
    password_confirmation = request.form.get('password_confirmation')
    # TODO


@auth_bp.route("/", methods=["DELETE"])
def delete_account():
    pass
    # Account deletion. This route will destroy users identified by their uid, access_token and client headers.


@auth_bp.route("/", methods=["PUT"])
def update_account():
    pass
    # Account updates. This route will update an existing user's account settings. The default accepted params are password and password_confirmation, but this can be customized using the devise_parameter_sanitizer system. If config.check_current_password_before_update is set to :attributes the current_password param is checked before any update, if it is set to :password the current_password param is checked only if the request updates user password.


@auth_bp.route("/sign_in", methods=["POST"])
def signin():
    """
    Email authentication.
    Requires email and password as params.
    This route will return a JSON representation of the User model
    on successful login along with the access-token and client in
    the header of the response."""
    email = request.form.get('email')
    password = request.form.get('password')
    try:
        user = User.objects.get(email=email,
                                password=hashfunc(password))
        resp = jsonify(uid=user._id,
                       provider=user.provider,
                       email=user.email,
                       name=user.name,
                       role=user.role)
        resp.headers["uid"] = user._id
        resp.headers["access-token"] = str(uuid.uuid4())
        resp.headers["expiry"] = int(time.time()) + conf.TOKEN_LIFESPAN
        resp.headers["client"] = str(uuid.uuid4())
    except User.DoesNotExist:
        return jsonify({
              "errors": ["Invalid login credentials. Please try again."]
                })


@auth_bp.route("/sign_out", methods=["DELETE"])
def signout():
    pass
    # Use this route to end the user's current session. This route will invalidate the user's authentication token. You must pass in uid, client, and access-token in the request headers.


@auth_bp.route("/<provider>", methods=["GET"])
def sso(provider):
    pass
    # Set this route as the destination for client authentication. Ideally this will happen in an external window or popup. Read more.


@auth_bp.route("/<provider>/callback", methods=["GET", "POST"])
def sso_callback(provider):
    pass
    # Destination for the oauth2 provider's callback uri. postMessage events containing the authenticated user's data will be sent back to the main client window from this page. Read more.


@auth_bp.route("/validate_token", methods=["GET"])
def validate_token():
    pass
    # Use this route to validate tokens on return visits to the client. Requires uid, client, and access-token as params. These values should correspond to the columns in your User table of the same names.


@auth_bp.route("/password", methods=["POST"])
def password_reset():
    pass
    # Use this route to send a password reset confirmation email to users that registered by email. Accepts email and redirect_url as params. The user matching the email param will be sent instructions on how to reset their password. redirect_url is the url to which the user will be redirected after visiting the link contained in the email.


@auth_bp.route("/password", methods=["PUT"])
def password_reset_confirm():
    pass
    # Use this route to change users' passwords. Requires password and password_confirmation as params. This route is only valid for users that registered by email (OAuth2 users will receive an error). It also checks current_password if config.check_current_password_before_update is not set false (disabled by default).


@auth_bp.route("/password/edit", methods=["GET"])
def password_edit():
    pass
    # Verify user by password reset token. This route is the destination URL for password reset confirmation. This route must contain reset_password_token and redirect_url params. These values will be set automatically by the confirmation email that is generated by the password reset request.
